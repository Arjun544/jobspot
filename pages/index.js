import { createContext, useMemo, useState } from "react";
import Head from "next/head";
import TopBar from "../components/TopBar";
import SearchSection from "../components/SearchSection";
import { useRefreshToken } from "../helpers/useRefreshToken";
import { getAllJobs } from "../services/job_services";
import Filters from "../components/Filters";
import RecommendedJobs from "../components/RecommendedJobs";
import { useSelector } from "react-redux";

export const AppContext = createContext(null);

function Home({ jobs }) {
  // call refresh endpoint
  const { loading } = useRefreshToken();
  const { isAuth, user } = useSelector((state) => state.auth);
  const [filteredJobs, setFilteredJobs] = useState([]);

  // Returns the jobs where job industry contains any recommended key
  const recommendedJobs = useMemo(() => {
    const recommendedKeys = [
      "software",
      "web",
      "mobile",
      "design",
      "IT",
      "developer",
    ];
    const recommendedJobs = jobs.filter((job) =>
      recommendedKeys
        .map((key) => job.industry.toLowerCase().includes(key.toLowerCase()))
        .includes(true)
    );
    return recommendedJobs;
  }, [jobs]);

  // Returns the jobs where job location is same as current user location
  const locationBasedJobs = useMemo(() => {
    return isAuth && jobs.filter((job) => job.location === user.city);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [jobs, isAuth]);

  if (loading) {
    return (
      <div className="flex h-screen items-center justify-center">
        <span className="animate-pulse text-xl font-semibold tracking-widest">
          Loading....
        </span>
      </div>
    );
  }
  return (
    <AppContext.Provider value={{ filteredJobs, setFilteredJobs }}>
      <Head>
        <title>Home - Jobspot</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="bg-slate-100 ">
        <TopBar />
        <SearchSection />

        <div className="flex px-6 pt-80 md:px-16 md:pt-44">
          {/* filters */}
          <Filters jobs={isAuth ? locationBasedJobs : recommendedJobs} />
          <RecommendedJobs />
        </div>
      </main>
    </AppContext.Provider>
  );
}

export async function getServerSideProps(context) {
  const { data } = await getAllJobs();

  return {
    props: {
      jobs: data.jobs,
    },
  };
}

export default Home;
