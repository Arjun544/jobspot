// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  name           String
  email          String    @unique
  password       String
  profile        String
  profileId      String
  details        String
  city           String
  cv             String
  cvId           String
  type           String
  reviews        Review[]
  company        Company?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @default(now())
  Token          Token[]
  companyId      Int?
  jobs           Job[]     @relation("createdBy")
  savedJobs      Job[]     @relation("savedJobs")
  savedCompanies Company[] @relation("savedCompanies")
  Job            Job?      @relation(fields: [jobId], references: [id])
  jobId          Int?
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  schedule    String
  type        String
  level       String
  salary      Int
  location    String
  industry    String
  contact     String
  isClosed    Boolean  @default(false)
  createdBy   User     @relation("createdBy", fields: [userId], references: [id])
  userId      Int
  reviews     Review[]
  applicants  User[]
  saveBy      User[]   @relation("savedJobs")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  company     Company? @relation(fields: [companyId], references: [id])
  companyId   Int?
}

model Review {
  id        Int      @id @unique @default(autoincrement())
  comment   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  company   Company? @relation(fields: [companyId], references: [id])
  companyId Int?
  jobId     Int
}

model Company {
  id        Int      @id @default(autoincrement())
  name      String
  details   String
  image     String
  imageId   String
  city      String
  size      Int
  industry  String
  website   String
  contact   String
  saveBy    User[]   @relation("savedCompanies")
  jobs      Job[]
  reviews   Review[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int      @unique
}
